package nlz.db;


import java.sql.*;
import java.sql.Connection;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
// import javax.sql.DataSource;
import javax.sql.PooledConnection;
import javax.sql.ConnectionPoolDataSource;
import org.apache.tomcat.jdbc.pool.DataSource;
import org.apache.tomcat.jdbc.pool.PoolProperties;
import com.ibm.db2.jcc.*;
import java.util.*;

public class ConnectionPool {

	private static ConnectionPool instance = null;
    private Context initCtx                = null;
    private Context envCtx                 = null;
    private DataSource ds                  = null;
    // private DB2ConnectionPoolDataSource ds = null;
    // private DB2PooledConnection pc         = null;
    private Connection pc                  = null;
    // private Object[] pc = null;
    private PoolProperties props           = null;

    /**
     * 생성자
     * @throws NamingException 데이터소스 찾지 못할 때 예외처리
     */
//     public ConnectionPool(String JNDINames) throws NamingException {
//         initCtx  = new InitialContext();
//         envCtx   = (Context)initCtx.lookup("java:/comp/env");
//         ds       = (DataSource)envCtx.lookup(JNDINames);
//         instance = this;
//     }

    public ConnectionPool() {}

    public ConnectionPool(String host, int port, String db, String user, String pass) throws NamingException, SQLException { //public

          props = new PoolProperties();
          props.setUrl("jdbc:db2://" + host + ":" + port + "/" + db);
          props.setDriverClassName("com.ibm.db2.jcc.DB2Driver");
          props.setUsername(user);
          props.setPassword(pass);
          // props.setJmxEnabled(true);
		  props.setDefaultAutoCommit(true);
          props.setTestWhileIdle(true);
          props.setTestOnBorrow(true);
          props.setValidationQuery("SELECT 1 FROM SYSIBM.SYSDUMMY1");
          props.setTestOnReturn(false);
          props.setValidationInterval(30000);
          props.setTimeBetweenEvictionRunsMillis(30000);
          // props.setMaxActive(10);
          props.setMinIdle(2);
          props.setInitialSize(4);
          props.setMaxWait(10000);
          props.setRemoveAbandonedTimeout(60);
          props.setMinEvictableIdleTimeMillis(30000);
          props.setLogAbandoned(true);
          props.setRemoveAbandoned(false);
		  props.setConnectionProperties("[DriverType=4;DefaultIsolationLevel=1;clientProgramName=diagmon;]");
          // props.setJdbcInterceptors(
            // "org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;"+
            // "org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer");

		  ds = new DataSource();
		  ds.setPoolProperties(props);

		  pc = ds.getConnection();

		// ds = new DB2ConnectionPoolDataSource();
        // ds.setServerName(host);
        // ds.setPortNumber(port);
        // ds.setDatabaseName(db);
        // ds.setDriverType(4);
		// ds.setConnectionTimeout(60);
		// // // ds.setInitialSize(10);
		// // // ds.setInitialPoolSize("10");
		// ds.setConnectionCloseWithInFlightTransaction(1);
		// ds.setDefaultIsolationLevel(1);
        // // ds.setUser(user);
        // // ds.setPassword(pass);

        // initCtx = new InitialContext();
        // initCtx.bind("java:comp/env/jdbc/nlzDS", ds);
        // // ds      = (DataSource)initCtx.lookup(JNDINames);

		// props = new Properties();
        // // props.put("ServerName",host);
        // // props.put("PortNumber",port);
        // // props.put("DatabaseName",db);
		// // props.put("ConnectionTimeout",60);
		// props.put("InitialSize",10);
		// props.put("InitialPoolSize",10);
		// // props.put("ConnectionCloseWithInFlightTransaction",1);
		// // props.put("DefaultIsolationLevel",1);
        // // props.put("DriverType",4);
        // // props.put("User",user);
        // // props.put("Password",pass);
        // pc = ds.getDB2PooledConnection(user, pass, props);

        instance = this;
    }

    /**
     * 인스턴스를 얻는다.
     * @throws NamingException 데이터소스 찾지 못할 때 예외처리
     */
    public static ConnectionPool getInstance() {
        return ConnectionPool.instance;
    }

    /**
     * 데이터베이스 커넥션을 얻는다.
     * @return 데이터베이스 커넥션
     * @throws Exception 데이터베이스 커넥션 생성시 예외처리
     */
    public Connection getConnection() throws Exception {
        // return pc.getDB2Connection(props);
		// System.out.println("POOL Active: " + ds.getActive() + ", Idle: " + ds.getIdle());
        // return ((PooledConnection)pc).getConnection();
		return ds.getConnection();
		// return pc;
    }

    public void releaseConnection() throws Exception {
		// ((PooledConnection)pc).close();
		pc.close();
        // pc = null;
		ds.close();
        ds = null;
        instance = null;
    }


}
