<?xml version="1.0" encoding="UTF-8"?>
<QUERY>
  <item>
    <time>2018-02-08 16:34:51</time>
    <sql><![CDATA[select COALESCE(cast(TBSP_NAME as char(20)), 'Total') tbsp_name
    , cast(max(TBSP_TYPE) as char(4)) type
    , cast(max(TBSP_AUTO_RESIZE_ENABLED) as char(4)) auto
    , cast((round(sum(TBSP_TOTAL_PAGES*TBSP_PAGE_SIZE)/(1073741824+0.01))) as int) total_size_GB
    , cast(round(sum(TBSP_USED_PAGES*TBSP_PAGE_SIZE)/(1073741824+0.01)) as int) used_size_GB
    , cast(round(sum(TBSP_PAGE_TOP) / (sum(TBSP_TOTAL_PAGES)+0.01) * 100) as int) hwm_ratio
    , cast(round(sum(TBSP_USED_PAGES) / (sum(TBSP_TOTAL_PAGES)+0.01) * 100) as int) used_ratio
from SYSIBMADM.TBSP_UTILIZATION
group by rollup(tbsp_name)]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:34:56</time>
    <sql><![CDATA[select COALESCE(cast(TBSP_NAME as char(20)), 'Total') tbsp_name
    , cast(max(TBSP_TYPE) as char(4)) type
    , cast(max(TBSP_AUTO_RESIZE_ENABLED) as char(4)) auto
    , cast((round(sum(TBSP_TOTAL_PAGES*TBSP_PAGE_SIZE)/(1073741824+0.01))) as int) total_size_GB
    , cast(round(sum(TBSP_USED_PAGES*TBSP_PAGE_SIZE)/(1073741824+0.01)) as int) used_size_GB
    , cast(round(sum(TBSP_PAGE_TOP) / (sum(TBSP_TOTAL_PAGES)+0.01) * 100) as int) hwm_ratio
    , cast(round(sum(TBSP_USED_PAGES) / (sum(TBSP_TOTAL_PAGES)+0.01) * 100) as int) used_ratio
from SYSIBMADM.TBSP_UTILIZATION
group by rollup(tbsp_name)]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:01</time>
    <sql><![CDATA[SELECT varchar(container_name, 65) as container_name, 
       fs_id, 
       fs_used_size, 
       fs_total_size, 
       CASE WHEN fs_total_size > 0 
            THEN DEC(100*(FLOAT(fs_used_size)/FLOAT(fs_total_size)),5,2) 
            ELSE DEC(-1,5,2) 
       END as utilization 
FROM TABLE(MON_GET_CONTAINER('',-1)) AS t 
ORDER BY utilization DESC]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:05</time>
    <sql><![CDATA[SELECT * FROM SYSIBMADM.ENV_SYS_RESOURCES
order by 1,5]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:06</time>
    <sql><![CDATA[SELECT * FROM SYSIBMADM.ENV_SYS_RESOURCES
order by 1,5]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:09</time>
    <sql><![CDATA[SELECT * FROM TABLE(DB_PARTITIONS()) AS T
ORDER BY 2, 3]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:16</time>
    <sql><![CDATA[SELECT executable_id,
       SECTION_TYPE,
       STMT_PKG_CACHE_ID,
       PACKAGE_SCHEMA,
       PACKAGE_NAME,
       SECTION_NUMBER,
       NUM_EXECUTIONS,
       Total_cpu_time,
       POOL_DATA_L_READS,
       POOL_DATA_P_READS,
       POOL_INDEX_L_READS,
       POOL_INDEX_P_READS,
       ROWS_READ,
       ROWS_RETURNED,
       Varchar(stmt_text) as stmt_text
FROM TABLE(MON_GET_PKG_CACHE_STMT (NULL, NULL,NULL, -1)) AS T]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:20</time>
    <sql><![CDATA[SELECT DBPARTITIONNUM, TIMESTAMP, RECTYPE, LEVEL, IMPACT, MSGNUM, MSGTYPE, OBJTYPE, CAST(MSG AS VARCHAR(500)) AS MSG, APPLNAME, APPLHANDLE, AUTH_ID, PRODUCT, COMPONENT, FUNCTION, PROCESS_NAME, EDUNAME, PROBE, OSERR, RETCODE, OBJNAME, EVENTTYPE, EVENTDESC, EVENTSTATE, CAST(EVENTSTACK AS VARCHAR(500)) AS EVENTSTACK, VARCHAR(FULLREC) AS FULLREC
  FROM TABLE (PD_GET_DIAG_HIST('MAIN', 'ALL', '', CURRENT DATE - 7 DAYS, CURRENT DATE, NULL ) ) AS T
 ORDER BY TIMESTAMP DESC]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:35:46</time>
    <sql><![CDATA[WITH BPMETRICS AS (
    SELECT TBSP_NAME,
           pool_data_l_reads + pool_temp_data_l_reads +
           pool_index_l_reads + pool_temp_index_l_reads +
           pool_xda_l_reads + pool_temp_xda_l_reads +
           pool_col_l_reads + pool_temp_col_l_reads as logical_reads,
           pool_data_p_reads + pool_temp_data_p_reads +
           pool_index_p_reads + pool_temp_index_p_reads +
           pool_xda_p_reads + pool_temp_xda_p_reads +
           pool_col_p_reads + pool_temp_col_p_reads as physical_reads,
           member
    FROM TABLE(MON_GET_TABLESPACE('',-1)) AS METRICS)
   SELECT
    TBSP_NAME,
    logical_reads,
    physical_reads,
    CASE WHEN logical_reads > 0
     THEN DECIMAL((1 - (FLOAT(physical_reads) / FLOAT(logical_reads))) * 100,5,2)
     ELSE NULL
    END AS HIT_RATIO,
    member
   FROM BPMETRICS
order by 1,4]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:36:04</time>
    <sql><![CDATA[SELECT BP_NAME, 
       DATA_PHYSICAL_READS, DATA_HIT_RATIO_PERCENT,
       INDEX_PHYSICAL_READS, INDEX_HIT_RATIO_PERCENT,
       COL_PHYSICAL_READS, COL_HIT_RATIO_PERCENT,
       AVG_PHYSICAL_READ_TIME, PREFETCH_RATIO_PERCENT
   FROM SYSIBMADM.MON_BP_UTILIZATION 
-- where BP_NAME NOT LIKE 'IBMSYS%'
 where BP_NAME = 'BP_INDEX_32K']]></sql>
  </item>
  <item>
    <time>2018-02-08 16:36:22</time>
    <sql><![CDATA[SELECT substr(varchar(FULLREC), locate(chr(34), FULLREC)+1, locate(chr(34), FULLREC, locate(chr(34), FULLREC)+1) - locate(chr(34), FULLREC)-1) as STMM,
       varchar_format(TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as TIMESTAMP,
       replace(replace(replace(replace(substr(varchar(FULLREC), locate('To: '||chr(34), FULLREC)+4), chr(34),''), '<automatic>', ''), chr(10), ''), ' ', '') as value
  FROM TABLE (PD_GET_DIAG_HIST('MAIN', 'ALL', '', CURRENT DATE - 90 DAYS, CURRENT DATE + 1 day, NULL ) ) AS T
 where function = 'sqlfLogUpdateCfgParam'
 ORDER BY STMM, TIMESTAMP]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:36:30</time>
    <sql><![CDATA[with STMM as (
SELECT 
       substr(varchar(FULLREC), locate(chr(34), FULLREC)+1, locate(chr(34), FULLREC, locate(chr(34), FULLREC)+1) - locate(chr(34), FULLREC)-1) as STMM,
       varchar_format(TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as TIMESTAMP,
       replace(replace(replace(replace(substr(varchar(FULLREC), locate('To: '||chr(34), FULLREC)+4), chr(34),''), '<automatic>', ''), chr(10), ''), ' ', '') as value
  FROM TABLE (PD_GET_DIAG_HIST('MAIN', 'ALL', '', CURRENT DATE - 90 DAYS, CURRENT DATE + 1 day, NULL ) ) AS T
 where function = 'sqlfLogUpdateCfgParam'
),
STMM2 as (
select TIMESTAMP,
--       sum(CASE WHEN STMM='Auto_switches' THEN value END) as Auto_switches,
--       sum(CASE WHEN STMM='Catalogcache_sz' THEN value END) as Catalogcache_sz,
--       sum(CASE WHEN STMM='Chngpgs_thresh' THEN value END) as Chngpgs_thresh,
       sum(CASE WHEN STMM='Database_memory' THEN value END) as Database_memory,
       sum(CASE WHEN STMM='Dbheap' THEN value END) as Dbheap,
--       sum(CASE WHEN STMM='Dft_degree' THEN value END) as Dft_degree,
--       sum(CASE WHEN STMM='Dft_table_org' THEN value END) as Dft_table_org,
       sum(CASE WHEN STMM='Instance_memory' THEN value END) as Instance_memory,
       sum(CASE WHEN STMM='Locklist' THEN value END) as Locklist,
--       sum(CASE WHEN STMM='Locktimeout' THEN value END) as Locktimeout,
--       sum(CASE WHEN STMM='Logbufsz' THEN value END) as Logbufsz,
--       sum(CASE WHEN STMM='Logfilsiz' THEN value END) as Logfilsiz,
--       sum(CASE WHEN STMM='Logprimary' THEN value END) as Logprimary,
--       sum(CASE WHEN STMM='Logsecond' THEN value END) as Logsecond,
--       sum(CASE WHEN STMM='Maxlocks' THEN value END) as Maxlocks,
--       sum(CASE WHEN STMM='Num_initagents' THEN value END) as Num_initagents,
--       sum(CASE WHEN STMM='Num_iocleaners' THEN value END) as Num_iocleaners,
--       sum(CASE WHEN STMM='Num_ioservers' THEN value END) as Num_ioservers,
       sum(CASE WHEN STMM='Pckcachesz' THEN value END) as Pckcachesz,
--       sum(CASE WHEN STMM='Self_tuning_mem' THEN value END) as Self_tuning_mem,
       sum(CASE WHEN STMM='Sheapthres_shr' THEN value END) as Sheapthres_shr,
       sum(CASE WHEN STMM='Sortheap' THEN value END) as Sortheap,
       sum(CASE WHEN STMM='Stat_heap_sz' THEN value END) as Stat_heap_sz,
       sum(CASE WHEN STMM='Stmtheap' THEN value END) as Stmtheap,
       sum(CASE WHEN STMM='Util_heap_sz' THEN value END) as Util_heap_sz
  from STMM
 group by TIMESTAMP, STMM
)
select TIMESTAMP as TIME,
--       cast(max(Auto_switches) as bigint) as Auto_switches,
--       cast(max(Catalogcache_sz) as bigint) as Catalogcache_sz,
--       cast(max(Chngpgs_thresh) as bigint) as Chngpgs_thresh,
       cast(max(Database_memory) as bigint) as Database_memory,
       cast(max(Dbheap) as bigint) as Dbheap,
--       cast(max(Dft_degree) as bigint) as Dft_degree,
--       cast(max(Dft_table_org) as bigint) as Dft_table_org,
       cast(max(Instance_memory) as bigint) as Instance_memory,
       cast(max(Locklist) as bigint) as Locklist,
--       cast(max(Locktimeout) as bigint) as Locktimeout,
--       cast(max(Logbufsz) as bigint) as Logbufsz,
--       cast(max(Logfilsiz) as bigint) as Logfilsiz,
--       cast(max(Logprimary) as bigint) as Logprimary,
--       cast(max(Logsecond) as bigint) as Logsecond,
--       cast(max(Maxlocks) as bigint) as Maxlocks,
--       cast(max(Num_initagents) as bigint) as Num_initagents,
--       cast(max(Num_iocleaners) as bigint) as Num_iocleaners,
--       cast(max(Num_ioservers) as bigint) as Num_ioservers,
       cast(max(Pckcachesz) as bigint) as Pckcachesz,
--       cast(max(Self_tuning_mem) as bigint) as Self_tuning_mem,
       cast(max(Sheapthres_shr) as bigint) as Sheapthres_shr,
       cast(max(Sortheap) as bigint) as Sortheap,
       cast(max(Stat_heap_sz) as bigint) as Stat_heap_sz,
       cast(max(Stmtheap) as bigint) as Stmtheap,
       cast(max(Util_heap_sz) as bigint) as Util_heap_sz
  from STMM2
 group by TIMESTAMP]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:36:51</time>
    <sql><![CDATA[SELECT tabschema, tabname, indname, compress_attr, iid, index_compressed,
      pct_pages_saved, num_leaf_pages_saved 
    FROM TABLE(sysproc.admin_get_index_compress_info('T', null, null, null, null)) 
    AS t
WHERE tabschema NOT LIKE 'SYS%']]></sql>
  </item>
  <item>
    <time>2018-02-08 16:36:57</time>
    <sql><![CDATA[SELECT tabschema, tabname, indname, compress_attr, iid, index_compressed,
      pct_pages_saved, num_leaf_pages_saved 
    FROM TABLE(sysproc.admin_get_index_compress_info('T', null, null, null, null)) 
    AS t
WHERE tabschema NOT LIKE 'SYS%']]></sql>
  </item>
  <item>
    <time>2018-02-08 16:36:59</time>
    <sql><![CDATA[SELECT tabschema, tabname, indname, compress_attr, iid, index_compressed,
      pct_pages_saved, num_leaf_pages_saved 
    FROM TABLE(sysproc.admin_get_index_compress_info('T', null, null, null, null)) 
    AS t
WHERE tabschema NOT LIKE 'SYS%']]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:02</time>
    <sql><![CDATA[SELECT tabschema, tabname, indname, iid, compress_attr, index_compressed, index_object_l_size, index_object_p_size, index_requires_rebuild 
FROM TABLE(sysproc.admin_get_index_info('T', 'DB2I105', 'LINEITEM')) AS t]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:06</time>
    <sql><![CDATA[SELECT MEMBER, MAX_MEMBER_MEM, CURRENT_MEMBER_MEM, PEAK_MEMBER_MEM
   FROM TABLE(SYSPROC.ADMIN_GET_MEM_USAGE()) AS T]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:25</time>
    <sql><![CDATA[SELECT * 
   FROM TABLE (
      SYSPROC.ADMIN_GET_TEMP_COLUMNS(
         null, null, null)) 
   AS T]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:29</time>
    <sql><![CDATA[SELECT *
   FROM TABLE (SYSPROC.ADMIN_GET_TEMP_TABLES(null, '', ''))
   AS T]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:33</time>
    <sql><![CDATA[SELECT *
FROM TABLE(SYSPROC.DB_GET_CFG(-2))
ORDER BY NAME, MEMBER]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:48</time>
    <sql><![CDATA[SELECT QUEUE_POSITION,
       OBJECT_TYPE,
       OBJECT_STATUS,
       VARCHAR(OBJECT_SCHEMA, 10) AS OBJECT_SCHEMA,
       VARCHAR(OBJECT_NAME, 10) AS OBJECT_NAME
FROM TABLE(MON_GET_AUTO_RUNSTATS_QUEUE()) AS T
ORDER BY QUEUE_POSITION ASC]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:37:53</time>
    <sql><![CDATA[SELECT *
    FROM TABLE( 
       MON_GET_MEMORY_SET(NULL, CURRENT_SERVER, -2))]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:00</time>
    <sql><![CDATA[SELECT UOW_SW_STATE, STATEMENT_SW_STATE, TABLE_SW_STATE, BUFFPOOL_SW_STATE, LOCK_SW_STATE, SORT_SW_STATE, TIMESTAMP_SW_STATE, DBPARTITIONNUM FROM SYSIBMADM.SNAPSWITCHES]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:09</time>
    <sql><![CDATA[WITH WLM (SYSDEFAULTUSERWORKLOAD) AS (
SELECT SUM(CASE WHEN WORKLOAD_NAME = 'SYSDEFAULTUSERWORKLOAD' THEN CPU_UTILIZATION END) AS SYSDEFAULTUSERWORKLOAD
  FROM TABLE(MON_SAMPLE_WORKLOAD_METRICS
      (null, current server, '',10 ,-2)) AS t 
 GROUP BY WORKLOAD_NAME
)
SELECT CURRENT TIME AS TIME,
       DECIMAL(MAX(SYSDEFAULTUSERWORKLOAD),5,2) AS SYSDEFAULTUSERWORKLOAD
  FROM WLM]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:16</time>
    <sql><![CDATA[select snap0.SNAPSHOT_TIMESTAMP,
(
decimal(decimal(( TOTAL_CONS  -
         ( select TOTAL_CONS
          from sysibmadm.snapdb as SNAP1
          where snap1.SNAPSHOT_TIMESTAMP = ( select max(snap2.SNAPSHOT_TIMESTAMP)
                                             from sysibmadm.snapdb as SNAP2
                                             where snap2.SNAPSHOT_TIMESTAMP < snap0.SNAPSHOT_TIMESTAMP
                                           )

         )
), 21, 2)
/
decimal(timestampdiff(4, char( snap0.SNAPSHOT_TIMESTAMP -
  ( select max(snap2.SNAPSHOT_TIMESTAMP)
  from sysibmadm.snapdb as SNAP2
  where snap2.SNAPSHOT_TIMESTAMP < snap0.SNAPSHOT_TIMESTAMP
  ))
), 21, 2), 21, 2)
) as CONN_PER_MINUTE
from sysibmadm.snapdb as SNAP0]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:21</time>
    <sql><![CDATA[with POOL_DATA_L_READS_DELTA_TB as
(select snap0.SNAPSHOT_TIMESTAMP,
( POOL_DATA_L_READS  -
         ( select POOL_DATA_L_READS
          from sysibmadm.snapdb as SNAP1
          where snap1.SNAPSHOT_TIMESTAMP = ( select max(snap2.SNAPSHOT_TIMESTAMP)
                                             from sysibmadm.snapdb as SNAP2
                                             where snap2.SNAPSHOT_TIMESTAMP < snap0.SNAPSHOT_TIMESTAMP
                                           )

         )
) as POOL_DATA_L_READS_DELTA
from sysibmadm.snapdb as SNAP0 ),

POOL_DATA_P_READS_DELTA_TB as
(select snap0.SNAPSHOT_TIMESTAMP,
( POOL_DATA_P_READS  -
         ( select POOL_DATA_P_READS
          from sysibmadm.snapdb as SNAP1
          where snap1.SNAPSHOT_TIMESTAMP = ( select max(snap2.SNAPSHOT_TIMESTAMP)
                                             from sysibmadm.snapdb as SNAP2
                                             where snap2.SNAPSHOT_TIMESTAMP < snap0.SNAPSHOT_TIMESTAMP
                                           )

         )
) as POOL_DATA_P_READS_DELTA
from sysibmadm.snapdb as SNAP0 )

select snap0.SNAPSHOT_TIMESTAMP,
decimal(( decimal( POOL_DATA_L_READS_DELTA + POOL_DATA_P_READS_DELTA , 21, 2) /
decimal(timestampdiff(4, char( snap0.SNAPSHOT_TIMESTAMP -
  ( select max(snap2.SNAPSHOT_TIMESTAMP)
  from sysibmadm.snapdb as SNAP2
  where snap2.SNAPSHOT_TIMESTAMP < snap0.SNAPSHOT_TIMESTAMP
  )) ), 21, 2) ), 12,1) as PHYS_READ_IO_PER_MINUTE
from sysibmadm.snapdb as SNAP0, POOL_DATA_L_READS_DELTA_TB B,
POOL_DATA_P_READS_DELTA_TB C
where SNAP0.SNAPSHOT_TIMESTAMP = B.SNAPSHOT_TIMESTAMP
and SNAP0.SNAPSHOT_TIMESTAMP =   C.SNAPSHOT_TIMESTAMP]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:24</time>
    <sql><![CDATA[SELECT
to_char(x.SNAPSHOT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as time
,CASE pkg_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) end end AS PKG_CACHE

,CASE cat_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) end end AS CAT_CACHE

,x.pkg_cache_lookups,  x.pkg_cache_inserts
,x.cat_cache_lookups,  x.cat_cache_inserts
,x.PKG_CACHE_NUM_OVERFLOWS ,x.CAT_CACHE_OVERFLOWS

, TOTAL_LOG_USED, SEC_LOG_USED_TOP, TOT_LOG_USED_TOP, SEC_LOGS_ALLOCATED
FROM (SELECT
a.rownum
,a.appls_cur_cons                             as appls_cur_cons
,a.appls_in_db2                               as appls_in_db2
,a.rows_selected      - b.rows_selected       as select_sql_stmts
,a.rows_updated       - b.rows_updated        as uid_sql_stmts
,a.total_sorts        - b.total_sorts         as total_sorts
,a.total_sort_time    - b.total_sort_time     as total_sort_time
,a.sort_overflows     - b.sort_overflows      as sort_overflows
,a.active_sorts                               as active_sorts
,a.lock_list_in_use                           as lock_list_in_use
,a.pkg_cache_lookups  - b.pkg_cache_lookups   as pkg_cache_lookups
,a.pkg_cache_inserts  - b.pkg_cache_inserts   as pkg_cache_inserts
,a.cat_cache_lookups  - b.cat_cache_lookups   as cat_cache_lookups
,a.cat_cache_inserts  - b.cat_cache_inserts   as cat_cache_inserts
,a.PKG_CACHE_NUM_OVERFLOWS - b.PKG_CACHE_NUM_OVERFLOWS as PKG_CACHE_NUM_OVERFLOWS
,a.CAT_CACHE_OVERFLOWS - b.CAT_CACHE_OVERFLOWS as CAT_CACHE_OVERFLOWS
,a.TOTAL_LOG_USED - b.TOTAL_LOG_USED as TOTAL_LOG_USED
,a.SEC_LOG_USED_TOP - b.SEC_LOG_USED_TOP as SEC_LOG_USED_TOP
,a.TOT_LOG_USED_TOP - b.TOT_LOG_USED_TOP as TOT_LOG_USED_TOP
,a.SEC_LOGS_ALLOCATED - b.SEC_LOGS_ALLOCATED as SEC_LOGS_ALLOCATED
,a.SNAPSHOT_TIMESTAMP                         as SNAPSHOT_TIMESTAMP
FROM (SELECT  ROWNUMBER() over(order by snapshot_timestamp) as rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
, TOTAL_LOG_USED, SEC_LOG_USED_TOP, TOT_LOG_USED_TOP, SEC_LOGS_ALLOCATED
,snapshot_timestamp
FROM dbccs.snapdb
ORDER BY snapshot_timestamp) a,
(SELECT  ROWNUMBER() over(order by snapshot_timestamp)+1 AS rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
, TOTAL_LOG_USED, SEC_LOG_USED_TOP, TOT_LOG_USED_TOP, SEC_LOGS_ALLOCATED
,snapshot_timestamp
FROM dbccs.snapdb
ORDER BY snapshot_timestamp) b
WHERE a.rownum = b.rownum) x]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:31</time>
    <sql><![CDATA[select OS_FULL_VERSION, OS_KERNEL_VERSION, CPU_TOTAL, CPU_HMT_DEGREE, CPU_CORES_PER_SOCKET, MEMORY_TOTAL, MEMORY_FREE, MEMORY_SWAP_TOTAL, MEMORY_SWAP_FREE
  from table(SYSPROC.ENV_GET_SYSTEM_RESOURCES())]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:37</time>
    <sql><![CDATA[SELECT HOST_NAME, OS_FULL_VERSION, OS_KERNEL_VERSION, TOTAL_CPUS, TOTAL_MEMORY
 FROM SYSIBMADM.ENV_SYS_INFO]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:44</time>
    <sql><![CDATA[WITH BPMETRICS AS (
SELECT TBSP_ID, TBSP_NAME, TBSP_CUR_POOL_ID, TBSP_USED_PAGES, TBSP_TOTAL_PAGES, TBSP_AUTO_RESIZE_ENABLED,
	   pool_data_l_reads + pool_temp_data_l_reads +
	   pool_index_l_reads + pool_temp_index_l_reads +
	   pool_xda_l_reads + pool_temp_xda_l_reads +
	   pool_col_l_reads + pool_temp_col_l_reads as logical_reads,
	   pool_data_p_reads + pool_temp_data_p_reads +
	   pool_index_p_reads + pool_temp_index_p_reads +
	   pool_xda_p_reads + pool_temp_xda_p_reads +
	   pool_col_p_reads + pool_temp_col_p_reads as physical_reads,
	   member
  FROM TABLE(MON_GET_TABLESPACE('',-1)) AS METRICS)
SELECT
		TBSP_NAME,
		CASE WHEN logical_reads > 0
		THEN DECIMAL((1 - (FLOAT(physical_reads) / FLOAT(logical_reads))) * 100,5,2)
		ELSE NULL
		END AS HIT_RATIO,
		B.PAGESIZE,
		A.TBSP_USED_PAGES*B.PAGESIZE/1024/1024 AS SIZE_M,
		DEC(100*A.TBSP_USED_PAGES/A.TBSP_TOTAL_PAGES,5,2) AS PCT,
		A.TBSP_AUTO_RESIZE_ENABLED AS AUTO_RESIZE,
		C.BPNAME
   FROM BPMETRICS A,
		SYSCAT.TABLESPACES B,
		SYSCAT.BUFFERPOOLS C
  WHERE A.TBSP_ID = B.TBSPACEID
    AND A.TBSP_CUR_POOL_ID = C.BUFFERPOOLID]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:49</time>
    <sql><![CDATA[SELECT CPU_LOAD_SHORT, CPU_LOAD_LONG
  FROM TABLE(SYSPROC.ENV_GET_SYSTEM_RESOURCES())]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:38:57</time>
    <sql><![CDATA[WITH MEM (MEM_POOL, GRP, POOL_USED) AS (
SELECT COALESCE(MEMORY_SET_TYPE||'-'||MEMORY_POOL_TYPE,'TOTAL') AS MEM_POOL,
       GROUPING(MEMORY_SET_TYPE||'-'||MEMORY_POOL_TYPE) AS GRP,
	   SUM(MEMORY_POOL_USED) AS POOL_USED
  FROM TABLE(MON_GET_MEMORY_POOL(NULL, CURRENT_SERVER, -2)) AS T
 GROUP BY ROLLUP(MEMORY_SET_TYPE||'-'||MEMORY_POOL_TYPE)
)
SELECT MEM_POOL,
       DEC(POOL_USED/1024.0,5,1) AS POOL_USED,
       DEC(100.0*POOL_USED/(SELECT POOL_USED FROM MEM WHERE GRP=1),5,2) AS PCT
  FROM MEM
 ORDER BY PCT DESC
 FETCH FIRST 10 ROWS ONLY]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:39:05</time>
    <sql><![CDATA[SELECT * FROM TABLE(MON_GET_TABLESPACE('',-1)) AS t
ORDER BY TBSP_ID, MEMBER]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:39:17</time>
    <sql><![CDATA[WITH SORT_CONSUMERS(TOTAL_SORT_CONSUMERS,
					TOTAL_POST_THRESHOLD_SORT_CONSUMERS) 
AS (SELECT (TOTAL_SORTS + TOTAL_PEDS + TOTAL_PEAS +
			TOTAL_HASH_JOINS + TOTAL_HASH_GRPBYS +  
			TOTAL_OLAP_FUNCS) AS TOTAL_SORT_CONSUMERS,
		   (POST_THRESHOLD_SORTS + POST_THRESHOLD_PEDS + 
			POST_THRESHOLD_PEAS +
			POST_SHRTHRESHOLD_HASH_JOINS +  
			POST_THRESHOLD_HASH_GRPBYS + 
			POST_THRESHOLD_OLAP_FUNCS) AS 
			TOTAL_POST_THRESHOLD_SORT_CONSUMERS 
	FROM TABLE(MON_GET_DATABASE(-1)) AS T) 
SELECT current time as time,
TOTAL_SORT_CONSUMERS,  
	   TOTAL_POST_THRESHOLD_SORT_CONSUMERS, 
	   CASE WHEN TOTAL_SORT_CONSUMERS > 0 THEN
		 DEC((FLOAT(TOTAL_POST_THRESHOLD_SORT_CONSUMERS)/ FLOAT(TOTAL_SORT_CONSUMERS)) * 100, 5, 2) 
	   ELSE 
		  NULL
	   END AS PERCENT_POST_THRESHOLD_SORT_CONSUMERS 
FROM SORT_CONSUMERS]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:39:38</time>
    <sql><![CDATA[select MEMBER, CLIENT_WRKSTNNAME, CLIENT_APPLNAME, CLIENT_PLATFORM, APPLICATION_HANDLE, APPLICATION_NAME,
       SYSTEM_AUTH_ID, SESSION_AUTH_ID, CLIENT_HOSTNAME, CLIENT_PORT_NUMBER, CONNECTION_START_TIME, 
	   ROWS_READ, ROWS_RETURNED, 
	   CAST(CASE WHEN ROWS_RETURNED > 0 THEN 
	   DECIMAL(ROWS_READ)/DECIMAL(ROWS_RETURNED) 
	   ELSE NULL END AS DECIMAL(21, 2)) AS RRRS, 
	   TOTAL_CPU_TIME, TOTAL_WAIT_TIME, TOTAL_SECTION_TIME, UOW_START_TIME, UOW_STOP_TIME, PREV_UOW_STOP_TIME, 
	   NUM_ASSOC_AGENTS, WORKLOAD_OCCURRENCE_STATE
  from table(MON_GET_CONNECTION(null, -2)) as t]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:39:50</time>
    <sql><![CDATA[with comontab ( level, tabschema, tabname, colname, partkeyseq )                               
                    as ( select 1, tabschema, tabname, colname, partkeyseq                              
                           from syscat.columns where partkeyseq <> 0 and partkeyseq is not null         
                          union all                                                                     
                         select old.level + 1, new.tabschema, new.tabname,                              
                                old.colname||'+'||new.colname, new.partkeyseq                           
                           from syscat.columns new, comontab old                                        
                          where new.tabschema = old.tabschema and new.tabname =  old.tabname            
                            and new.partkeyseq = old.partkeyseq + 1 and old.level < 17)                 
         select tab.tabschema, tab.tabname, 'Partitioning Key' as indname, '  ' as unique,              
                tab.colname, tab.colcount                                                               
           from ( select substr(tabschema,1,9) as tabschema, substr(tabname,1,30) as tabname,           
                         substr(colname,1,120) as colname, partkeyseq as colcount,                       
                         rank() over ( partition by tabschema, tabname order by level desc ) rank#      
                    from comontab) tab                                                                  
          where rank# = 1                                                                               
          union all                                                                                     
          select substr(tabschema,1,9) as tabschema, substr(tabname,1,30) as tabname,                   
                 substr(indname,1,18 ) as indname, uniquerule as unique,                                
                 substr(colnames,1,120) as colname, colcount                                             
            from syscat.indexes                                                                         
           where tabschema not like 'SYS%'                                                              
           order by 1,2,3 with ur]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:39:59</time>
    <sql><![CDATA[SELECT TIMESTAMP, APPL_ID, DBPARTITIONNUM, VARCHAR(MSG) AS MSG
  FROM TABLE ( PD_GET_LOG_MSGS( CURRENT TIMESTAMP - 7 DAYS)) AS T
 -- WHERE INSTANCENAME = 'ymsinst1' AND DBNAME = 'QDW'
 ORDER BY TIMESTAMP DESC]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:40:20</time>
    <sql><![CDATA[SELECT TIMESTAMP, APPL_ID, DBPARTITIONNUM, VARCHAR(MSG) AS MSG
  FROM TABLE ( PD_GET_LOG_MSGS( CURRENT TIMESTAMP - 30 DAYS)) AS T
 -- WHERE INSTANCENAME = 'ymsinst1' AND DBNAME = 'QDW'
 ORDER BY TIMESTAMP DESC]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:40:31</time>
    <sql><![CDATA[SELECT TIMESTAMP, APPL_ID, DBPARTITIONNUM, VARCHAR(MSG) AS MSG
  FROM TABLE ( PD_GET_LOG_MSGS( CURRENT TIMESTAMP - 360 DAYS)) AS T
 -- WHERE INSTANCENAME = 'ymsinst1' AND DBNAME = 'QDW'
 ORDER BY TIMESTAMP DESC]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:43:18</time>
    <sql><![CDATA[-- WORKLOAD별 상태 집계 (통계)
SELECT SC_NAME
      ,SC_SUB_NAME
      ,WL_NAME
      ,APPL_NAME
      ,WL_STATUS
      ,SMALLINT(COUNT(1)) COUNT
  FROM (
        SELECT DISTINCT SUBSTR(SERVICE_SUPERCLASS_NAME, 1, 15) AS SC_NAME
              ,SUBSTR(SERVICE_SUBCLASS_NAME, 1, 15)            AS SC_SUB_NAME
              ,SUBSTR(WORKLOAD_NAME, 1, 15)                    AS WL_NAME
              ,INTEGER(APPLICATION_HANDLE)                     AS APPL_HNDL
              ,SUBSTR(APPLICATION_NAME, 1, 20)                 AS APPL_NAME
              ,SUBSTR(WORKLOAD_OCCURRENCE_STATE, 1, 15)        AS WL_STATUS
          FROM TABLE(WLM_GET_SERVICE_CLASS_WORKLOAD_OCCURRENCES(NULL,NULL,-2))
--         WHERE SERVICE_SUBCLASS_NAME NOT IN ('SYSDEFAULTSYSTEMCLASS', 'SYSDEFAULTMAINTENANCECLASS', 'SYSDEFAULTUSERCLASS', 'SYSDEFAULTSUBCLASS')
       )
 GROUP BY SC_NAME
         ,SC_SUB_NAME
         ,WL_NAME
         ,APPL_NAME
         ,WL_STATUS
 ORDER BY 1, 2, 3, 4]]></sql>
  </item>
  <item>
    <time>2018-02-08 16:49:16</time>
    <sql><![CDATA[-- WORKLOAD별 상태 집계 (통계)
SELECT SC_NAME
      ,SC_SUB_NAME
      ,WL_NAME
      ,APPL_NAME
      ,WL_STATUS
      ,SMALLINT(COUNT(1)) COUNT
  FROM (
        SELECT DISTINCT SUBSTR(SERVICE_SUPERCLASS_NAME, 1, 15) AS SC_NAME
              ,SUBSTR(SERVICE_SUBCLASS_NAME, 1, 15)            AS SC_SUB_NAME
              ,SUBSTR(WORKLOAD_NAME, 1, 15)                    AS WL_NAME
              ,INTEGER(APPLICATION_HANDLE)                     AS APPL_HNDL
              ,SUBSTR(APPLICATION_NAME, 1, 20)                 AS APPL_NAME
              ,SUBSTR(WORKLOAD_OCCURRENCE_STATE, 1, 15)        AS WL_STATUS
          FROM TABLE(WLM_GET_SERVICE_CLASS_WORKLOAD_OCCURRENCES(NULL,NULL,-2))
--         WHERE SERVICE_SUBCLASS_NAME NOT IN ('SYSDEFAULTSYSTEMCLASS', 'SYSDEFAULTMAINTENANCECLASS', 'SYSDEFAULTUSERCLASS', 'SYSDEFAULTSUBCLASS')
       )
 GROUP BY SC_NAME
         ,SC_SUB_NAME
         ,WL_NAME
         ,APPL_NAME
         ,WL_STATUS
 ORDER BY 1, 2, 3, 4]]></sql>
  </item>
</QUERY>

