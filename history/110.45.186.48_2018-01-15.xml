<?xml version="1.0" encoding="UTF-8"?>
<QUERY>
  <item>
    <time>2018-01-15 15:07:41</time>
    <sql><![CDATA[SELECT
to_char(x.SNAPSHOT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as time
,CASE pkg_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) end end AS PKG_CACHE

,CASE cat_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) end end AS CAT_CACHE

,x.pkg_cache_lookups,  x.pkg_cache_inserts
,x.cat_cache_lookups,  x.cat_cache_inserts
,x.PKG_CACHE_NUM_OVERFLOWS ,x.CAT_CACHE_OVERFLOWS
FROM (SELECT
a.rownum
,a.appls_cur_cons                             as appls_cur_cons
,a.appls_in_db2                               as appls_in_db2
,a.rows_selected      - b.rows_selected       as select_sql_stmts
,a.rows_updated       - b.rows_updated        as uid_sql_stmts
,a.total_sorts        - b.total_sorts         as total_sorts
,a.total_sort_time    - b.total_sort_time     as total_sort_time
,a.sort_overflows     - b.sort_overflows      as sort_overflows
,a.active_sorts                               as active_sorts
,a.lock_list_in_use                           as lock_list_in_use
,a.pkg_cache_lookups  - b.pkg_cache_lookups   as pkg_cache_lookups
,a.pkg_cache_inserts  - b.pkg_cache_inserts   as pkg_cache_inserts
,a.cat_cache_lookups  - b.cat_cache_lookups   as cat_cache_lookups
,a.cat_cache_inserts  - b.cat_cache_inserts   as cat_cache_inserts
,a.PKG_CACHE_NUM_OVERFLOWS - b.PKG_CACHE_NUM_OVERFLOWS as PKG_CACHE_NUM_OVERFLOWS
,a.CAT_CACHE_OVERFLOWS - b.CAT_CACHE_OVERFLOWS as CAT_CACHE_OVERFLOWS
,a.SNAPSHOT_TIMESTAMP                         as SNAPSHOT_TIMESTAMP
FROM (SELECT  ROWNUMBER() over(order by snapshot_timestamp) as rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
,snapshot_timestamp
FROM dbums.snapdb
ORDER BY snapshot_timestamp) a,
(SELECT  ROWNUMBER() over(order by snapshot_timestamp)+1 AS rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
,snapshot_timestamp
FROM dbums.snapdb
ORDER BY snapshot_timestamp) b
WHERE a.rownum = b.rownum) x]]></sql>
  </item>
  <item>
    <time>2018-01-15 16:03:39</time>
    <sql><![CDATA[SELECT
to_char(x.SNAPSHOT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as time
,CASE pkg_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) end end AS PKG_CACHE

,CASE cat_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) end end AS CAT_CACHE

,x.pkg_cache_lookups,  x.pkg_cache_inserts
,x.cat_cache_lookups,  x.cat_cache_inserts
,x.PKG_CACHE_NUM_OVERFLOWS ,x.CAT_CACHE_OVERFLOWS
FROM (SELECT
a.rownum
,a.appls_cur_cons                             as appls_cur_cons
,a.appls_in_db2                               as appls_in_db2
,a.rows_selected      - b.rows_selected       as select_sql_stmts
,a.rows_updated       - b.rows_updated        as uid_sql_stmts
,a.total_sorts        - b.total_sorts         as total_sorts
,a.total_sort_time    - b.total_sort_time     as total_sort_time
,a.sort_overflows     - b.sort_overflows      as sort_overflows
,a.active_sorts                               as active_sorts
,a.lock_list_in_use                           as lock_list_in_use
,a.pkg_cache_lookups  - b.pkg_cache_lookups   as pkg_cache_lookups
,a.pkg_cache_inserts  - b.pkg_cache_inserts   as pkg_cache_inserts
,a.cat_cache_lookups  - b.cat_cache_lookups   as cat_cache_lookups
,a.cat_cache_inserts  - b.cat_cache_inserts   as cat_cache_inserts
,a.PKG_CACHE_NUM_OVERFLOWS - b.PKG_CACHE_NUM_OVERFLOWS as PKG_CACHE_NUM_OVERFLOWS
,a.CAT_CACHE_OVERFLOWS - b.CAT_CACHE_OVERFLOWS as CAT_CACHE_OVERFLOWS
,a.SNAPSHOT_TIMESTAMP                         as SNAPSHOT_TIMESTAMP
FROM (SELECT  ROWNUMBER() over(order by snapshot_timestamp) as rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
,snapshot_timestamp
FROM dbihp.snapdb
ORDER BY snapshot_timestamp) a,
(SELECT  ROWNUMBER() over(order by snapshot_timestamp)+1 AS rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
,snapshot_timestamp
FROM dbihp.snapdb
ORDER BY snapshot_timestamp) b
WHERE a.rownum = b.rownum) x]]></sql>
  </item>
  <item>
    <time>2018-01-15 17:00:59</time>
    <sql><![CDATA[SELECT
to_char(x.SNAPSHOT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as time
,CASE pkg_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.pkg_cache_inserts) / dec(x.pkg_cache_lookups)) * 100),15,2) end end AS PKG_CACHE

,CASE cat_cache_lookups when 0 then NULL
else
case when dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) < 0 then NULL
else dec(((1 - dec(x.cat_cache_inserts) / dec(x.cat_cache_lookups)) * 100),15,2) end end AS CAT_CACHE

,x.pkg_cache_lookups,  x.pkg_cache_inserts
,x.cat_cache_lookups,  x.cat_cache_inserts
,x.PKG_CACHE_NUM_OVERFLOWS ,x.CAT_CACHE_OVERFLOWS
FROM (SELECT
a.rownum
,a.appls_cur_cons                             as appls_cur_cons
,a.appls_in_db2                               as appls_in_db2
,a.rows_selected      - b.rows_selected       as select_sql_stmts
,a.rows_updated       - b.rows_updated        as uid_sql_stmts
,a.total_sorts        - b.total_sorts         as total_sorts
,a.total_sort_time    - b.total_sort_time     as total_sort_time
,a.sort_overflows     - b.sort_overflows      as sort_overflows
,a.active_sorts                               as active_sorts
,a.lock_list_in_use                           as lock_list_in_use
,a.pkg_cache_lookups  - b.pkg_cache_lookups   as pkg_cache_lookups
,a.pkg_cache_inserts  - b.pkg_cache_inserts   as pkg_cache_inserts
,a.cat_cache_lookups  - b.cat_cache_lookups   as cat_cache_lookups
,a.cat_cache_inserts  - b.cat_cache_inserts   as cat_cache_inserts
,a.PKG_CACHE_NUM_OVERFLOWS - b.PKG_CACHE_NUM_OVERFLOWS as PKG_CACHE_NUM_OVERFLOWS
,a.CAT_CACHE_OVERFLOWS - b.CAT_CACHE_OVERFLOWS as CAT_CACHE_OVERFLOWS
,a.SNAPSHOT_TIMESTAMP                         as SNAPSHOT_TIMESTAMP
FROM (SELECT  ROWNUMBER() over(order by snapshot_timestamp) as rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
,snapshot_timestamp
FROM dbexp.snapdb
ORDER BY snapshot_timestamp) a,
(SELECT  ROWNUMBER() over(order by snapshot_timestamp)+1 AS rownum
,dbpartitionnum
,appls_cur_cons
,appls_in_db2
,rows_selected
,rows_updated
,total_sorts
,total_sort_time
,sort_overflows
,active_sorts
,lock_list_in_use
,pkg_cache_lookups
,pkg_cache_inserts
,cat_cache_lookups
,cat_cache_inserts
,PKG_CACHE_NUM_OVERFLOWS
,CAT_CACHE_OVERFLOWS
,snapshot_timestamp
FROM dbexp.snapdb
ORDER BY snapshot_timestamp) b
WHERE a.rownum = b.rownum) x]]></sql>
  </item>
</QUERY>

